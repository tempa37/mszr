<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–¢—Ä–∞–Ω—Å–º–∞—à—Ç–æ–º—Å–∫</title>
    <style>
        html {
            background-color: #232323;
        }
        body {
            font-family: 'Roboto', Arial, sans-serif;
            background-color: #232323;
            color: #FFFFFF;
            margin: 0;
            padding: 0;
        }
        .header {
            justify-content: center;
            display: flex;
            align-items: center;
            padding: 50px 15px; /* –î–æ–±–∞–≤–ª–µ–Ω—ã –±–æ–ª—å—à–∏–µ –æ—Ç—Å—Ç—É–ø—ã —Å–≤–µ—Ä—Ö—É –∏ —Å–Ω–∏–∑—É */
            background-color: #303030;
            border-bottom: 2px solid #ffffff;
        }

        .header h2 {
            margin: 0;
            font-size: 1.5em;
            text-align: center;
        }
        .container_admin {
            display: flex;
            justify-content: center;
            gap: 20px;
            padding: 20px;
            flex-wrap: wrap;
        }
        .right-section_admin {
            padding: 20px;
            border: 1px solid #555;
            background-color: #333;
            border-radius: 10px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
            width: 280px;
            max-width: 100%;
        }
        .right-section_admin h3 {
            margin-top: 0;
            font-size: 1.2em;
            text-align: center;
        }
        .field-label {
            margin-bottom: 10px;
            font-size: 14px;
            color: #FFFFFF;
        }
        .serial-input {
            display: flex;
            align-items: center;
            border: 1px solid #555;
            border-radius: 4px;
            background-color: #444;
            margin-bottom: 20px;
            padding: 10px;
        }
        .serial-input input {
            flex: 1;
            height: 30px;
            text-align: center;
            font-size: 1em;
            border: none;
            background: none;
            color: #FFFFFF;
            padding-right: 10px;
        }
        .serial-input span {
            flex-shrink: 0;
            padding-left: 10px;
            font-size: 0.9em;
            color: #FFFFFF;
        }
        .tooltip {
            position: relative;
            display: inline-block;
            cursor: pointer;
        }
        .tooltip .tooltiptext {
            visibility: hidden;
            width: 200px;
            background-color: #555;
            color: #fff;
            text-align: center;
            border-radius: 6px;
            padding: 5px;
            position: absolute;
            z-index: 1;
            bottom: 125%;
            left: 50%;
            margin-left: -100px;
            opacity: 0;
            transition: opacity 0.3s;
        }
        .tooltip:hover .tooltiptext {
            visibility: visible;
            opacity: 1;
        }
        .submit-button {
            display: block;
            margin: 30px auto;
            padding: 10px 20px;
            background-color: #555555;
            border: none;
            color: #FFFFFF;
            font-size: 16px;
            cursor: pointer;
            border-radius: 5px;
            transition: background-color 0.3s;
        }
        .submit-button:hover {
            background-color: #666666;
        }
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.7);
        }
        .modal-content {
            background-color: #2c2c2c;
            margin: 20% auto; /* –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤–µ—Ä—Ö–Ω–∏–π –æ—Ç—Å—Ç—É–ø */
            padding: 20px;
            border: 1px solid #555;
            width: 30%; /* –£–º–µ–Ω—å—à–∞–µ–º —à–∏—Ä–∏–Ω—É */
            text-align: center;
            border-radius: 10px;
        }
        .modal-content p {
            font-size: 1em;
            color: #FFF;
        }
        .ok-button, .cancel-button {
            padding: 10px 20px;
            margin: 10px;
            border: none;
            cursor: pointer;
            font-size: 16px;
            border-radius: 5px;
            transition: background-color 0.3s;
        }
        .ok-button {
            background-color: #4caf50;
            color: white;
        }
        .cancel-button {
            background-color: #f44336;
            color: white;
        }
        .ok-button:hover {
            background-color: #45a049;
        }
        .cancel-button:hover {
            background-color: #e53935;
        }
    </style>
</head>
<body>
    <div class="header">
            <h2>–ú–∏–∫—Ä–æ–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∑–∞—â–∏—Ç—ã —Ä—É–¥–Ω–∏—á–Ω–∞—è –ú–°–ó–†-380. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∞–∑</h2>
    </div>
    <div class="container_admin">
        <div class="right-section_admin">
            <h3>–§–∞–∑–∞ A</h3>
            <form>
                <label class="field-label" for="c_phase_a">–ï–º–∫–æ—Å—Ç—å:</label>
                <div class="serial-input">
                    <input id="c_phase_a" type="text" value="<!--#CPHASEA-->" >
                    <span>&mu;F</span>
                </div>
                <label class="field-label" for="r_leak_a">–°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ —É—Ç–µ—á–∫–∏:</label>
                <div class="serial-input">
                    <input id="r_leak_a" type="text" value="<!--#RLEAKA-->" >
                    <span>MŒ©</span>
                </div>
                <div class="tooltip">
                    üõà
                    <span class="tooltiptext">–ó–∞—â–∏—Ç–∞ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç, –µ—Å–ª–∏ —Ç–æ–∫ —É—Ç–µ—á–∫–∏ –ª—é–±–æ–π –∏–∑ —Ñ–∞–∑ (A/B/C) –ø—Ä–µ–≤—ã—Å–∏—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –ø–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.</span>
                </div>
                <label class="field-label" for="target_value">–ü–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–æ–∫–∞ —É—Ç–µ—á–∫–∏:</label>
                <div class="serial-input">
                    <input id="target_value" type="text" value="<!--#TVALUE-->" >
                    <span>mA</span>
                </div>
            </form>
        </div>
        <div class="right-section_admin">
            <h3>–§–∞–∑–∞ B</h3>
            <form>
                <label class="field-label" for="c_phase_b">–ï–º–∫–æ—Å—Ç—å:</label>
                <div class="serial-input">
                    <input id="c_phase_b" type="text" value="<!--#CPHASEB-->" >
                    <span>&mu;F</span>
                </div>
                <label class="field-label" for="r_leak_b">–°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ —É—Ç–µ—á–∫–∏:</label>
                <div class="serial-input">
                    <input id="r_leak_b" type="text" value ="<!--#RLEAKB-->">
                    <span>MŒ©</span>
                </div>
            </form>
        </div>
        <div class="right-section_admin">
            <h3>–§–∞–∑–∞ C</h3>
            <form>
                <label class="field-label" for="c_phase_c">–ï–º–∫–æ—Å—Ç—å:</label>
                <div class="serial-input">
                    <input id="c_phase_c" type="text"  value ="<!--#CPHASEC-->">
                    <span>&mu;F</span>
                </div>
                <label class="field-label" for="r_leak_c">–°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ —É—Ç–µ—á–∫–∏:</label>
                <div class="serial-input">
                    <input id="r_leak_c" type="text"  value ="<!--#RLEAKC-->">
                    <span>MŒ©</span>
                </div>
            </form>
        </div>
    </div>
    <button class="submit-button" onclick="saveChangesAdmin()">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è</button>
    <div id="customModal" class="modal">
        <div class="modal-content">
            <p>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è?</p>
            <button class="ok-button" onclick="confirmChangesAdmin()">OK</button>
            <button class="cancel-button" onclick="closeCustomModal()">–û—Ç–º–µ–Ω–∞</button>
        </div>
    </div>
    <script>
	
        function saveChangesAdmin() {
            const modal = document.getElementById('customModal');
            modal.style.display = 'flex';
        }
		
		function confirmChangesAdmin() {
            const modal = document.getElementById('customModal');
            modal.style.display = 'none';
            saveDataAdmin(); 
        }
		
		function closeCustomModal() {
            const modal = document.getElementById('customModal');
            modal.style.display = 'none';
        }
		
		
		function validatePhaseData(values) {
			let targetValue = values.target_value;
			console.log("Original targetValue:", targetValue);

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å—Ç—Ä–æ–∫–∞ –±—É–∫–≤–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
			const hasLetters = /[a-zA-Z–∞-—è–ê-–Ø]/.test(targetValue);
			if (hasLetters) {
				console.log("Validation failed: —Å–æ–¥–µ—Ä–∂–∏—Ç –±—É–∫–≤–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã.");
				return false;
			}

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫ –∏ –∑–∞–ø—è—Ç—ã—Ö
			const dotCount = (targetValue.match(/\./g) || []).length;
			const commaCount = (targetValue.match(/,/g) || []).length;

			if (dotCount + commaCount > 1) {
				console.log("Validation failed: –±–æ–ª–µ–µ –æ–¥–Ω–æ–π —Ç–æ—á–∫–∏ –∏–ª–∏ –∑–∞–ø—è—Ç–æ–π.");
				return false;
			}

			// –ï—Å–ª–∏ –µ—Å—Ç—å –∑–∞–ø—è—Ç–∞—è, –∑–∞–º–µ–Ω—è–µ–º –µ—ë –Ω–∞ —Ç–æ—á–∫—É
			if (commaCount === 1) {
				targetValue = targetValue.replace(',', '.');
				values.target_value = targetValue; // –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –æ–±—ä–µ–∫—Ç–µ
				console.log("–ó–∞–ø—è—Ç–∞—è –∑–∞–º–µ–Ω–µ–Ω–∞ –Ω–∞ —Ç–æ—á–∫—É:", targetValue);
			}

			console.log("Validation passed.");
			return true;
		}
		
		function saveDataAdmin() {
            // –°—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è —Ñ–∞–∑
            const cPhaseA = document.getElementById('c_phase_a').value;
            const rLeakA = document.getElementById('r_leak_a').value;
            const cPhaseB = document.getElementById('c_phase_b').value;
            const rLeakB = document.getElementById('r_leak_b').value;
            const cPhaseC = document.getElementById('c_phase_c').value;
            const rLeakC = document.getElementById('r_leak_c').value;
            const targetValue = document.getElementById('target_value').value;
			
			const updatedData = {};
			
			
			if (cPhaseA) updatedData.c_phase_a = cPhaseA;
            if (rLeakA)  updatedData.r_leak_a  = rLeakA;
            if (cPhaseB) updatedData.c_phase_b = cPhaseB;
            if (rLeakB)  updatedData.r_leak_b  = rLeakB;
            if (cPhaseC) updatedData.c_phase_c = cPhaseC;
            if (rLeakC)  updatedData.r_leak_c  = rLeakC;
            if (targetValue) updatedData.target_value = targetValue;
			
			
			if (Object.keys(updatedData).length === 0) {
                alert('–ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.');
                return;
            }
			
			if (!validatePhaseData(updatedData)) {
                alert('–î–∞–Ω–Ω—ã–µ –Ω–µ –≤–∞–ª–∏–¥–Ω—ã');
                return;
            }
			
			const queryString = new URLSearchParams(updatedData).toString();
			
			fetch(`/save?${queryString}`, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json'
                }
            })
			
			setTimeout(function() 
			{
				window.location.href = "/index.shtml"; // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
			}, 5000);
			}
			
			
        function extractValue(value) {
            return value.replace(/<!--.*?-->/, '').trim(); // –£–±–∏—Ä–∞–µ–º —à–∞–±–ª–æ–Ω –∏ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        }
		
		
		function roundValue(value) {
        // –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–∏–ª–∏–≤–∞–µ–º SSI —Ç–µ–≥–∏
        let val = extractValue(value);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ —Ç–æ—á–∫–∞
        const dotIndex = val.indexOf('.');
        if (dotIndex === -1) {
            // –ï—Å–ª–∏ –Ω–µ—Ç –¥—Ä–æ–±–Ω–æ–π —á–∞—Å—Ç–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
            return val;
        }

        // –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ —Ü–µ–ª—É—é –∏ –¥—Ä–æ–±–Ω—É—é —á–∞—Å—Ç—å
        let intPart = val.slice(0, dotIndex);
        let fracPart = val.slice(dotIndex + 1);

        // –ò—â–µ–º 4 –ø–æ–¥—Ä—è–¥ –∏–¥—É—â–∏—Ö –Ω—É–ª—è –≤ –¥—Ä–æ–±–Ω–æ–π —á–∞—Å—Ç–∏
        const zeroIndex = fracPart.search(/0{4}/);
        if (zeroIndex !== -1) {
            // –ï—Å–ª–∏ –Ω–∞—à–ª–∏, —Ä–µ–∂–µ–º –¥—Ä–æ–±–Ω—É—é —á–∞—Å—Ç—å –ø–æ –Ω–∞—á–∞–ª—É —ç—Ç–∏—Ö –Ω—É–ª–µ–π
            fracPart = fracPart.slice(0, zeroIndex);
        }

        // –°–∫–ª–µ–∏–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ. –ï—Å–ª–∏ –¥—Ä–æ–±–Ω–∞—è —á–∞—Å—Ç—å –ø—É—Å—Ç–∞—è ‚Äì –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ —Ü–µ–ª—É—é
        return fracPart.length > 0 ? intPart + '.' + fracPart : intPart;
    }


        window.onload = function () {
            // –í—ã–±–∏—Ä–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã input –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            var inputs = document.querySelectorAll('input');

            // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–º—É input –∏ –∑–∞–º–µ–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ, –µ—Å–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç SSI-—Ç–µ–≥
            inputs.forEach(function (input) {
            input.value = roundValue(input.value);
        });
        };
			
    </script>
</body>
</html>
<!--#–ø—Ä–æ—Å—Ç–æ —Ä–∞–Ω–¥–æ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è 98089756423984230909980589787474764387548798065906590650964339590905-->
<!--#–ø—Ä–æ—Å—Ç–æ —Ä–∞–Ω–¥–æ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è 98089756423984230909980589787474764387548798065906590650964339590905-->
<!--#–ø—Ä–æ—Å—Ç–æ —Ä–∞–Ω–¥–æ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è 98089756423984230909980589787474764387548798065906590650964339590905-->
