<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Трансмаштомск</title>
    <style>
        html {
            background-color: #232323;
        }
        body {
            font-family: 'Roboto', Arial, sans-serif;
            background-color: #232323;
            color: #FFFFFF;
            margin: 0;
            padding: 0;
        }
        .header {
            justify-content: center;
            display: flex;
            align-items: center;
            padding: 50px 15px;
            background-color: #303030;
            border-bottom: 2px solid #ffffff;
        }
        .header h2 {
            margin: 0;
            font-size: 1.5em;
            text-align: center;
        }
        .container_admin {
            display: flex;
            justify-content: center;
            gap: 20px;
            padding: 20px;
            flex-wrap: wrap;
        }
        .right-section_admin {
            padding: 20px;
            border: 1px solid #555;
            background-color: #333;
            border-radius: 10px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
            width: 280px;
            max-width: 100%;
        }
        .full-width-section {
            display: flex;
            align-items: center;
            justify-content: flex-start;
            padding: 20px;
            border: 1px solid #555;
            background-color: #333;
            border-radius: 10px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
            width: calc(280px * 3 + 40px);
            max-width: calc(100% - 40px);
            margin: 10px auto 0;
            gap: 80px; /* регулируйте для вашего дизайна */
        }
		
		
        /* Стили для спинбокса времени отключения реле */
		
		/* скрываем нативные стрелки */
		#reley_time {
		  appearance: textfield;
		  -moz-appearance: textfield;
		  height: 36px;
		  line-height: 36px;
		  padding-right: 72px; /* 28px (кнопка) + 8px (отступ) + ~20px ("с") + запас */
		}
		#reley_time::-webkit-inner-spin-button,
		#reley_time::-webkit-outer-spin-button { -webkit-appearance: none; margin: 0; }
		
		
		.serial-input { position: relative; }
		
		/* контейнер со своими стрелками */
		.serial-input { position: relative; }
		.spin {
		  position: absolute;
		  right: 8px;
		  width: 28px;                 /* тут регулируешь размер стрелок */
		  height: 18px;
		  background: #555;
		  border-radius: 3px;
		  display: inline-flex;
		  align-items: center;
		  justify-content: center;
		  cursor: pointer;
		  user-select: none;
		}
			.serial-input .unit {
			  position: absolute;
			  right: 100px;                /* 28px ширина кнопки + 8px отступ + 4px зазор */
			  top: 50%;
			  transform: translateY(-50%);
			  pointer-events: none;       /* чтобы клики проходили мимо */
			  color: #fff;
			  font-size: 0.9em;
			}

			/* кнопки */
			.spin { position: absolute; right: 5px; width: 28px; height: 18px; /* ... */ }
			.spin.up   { top: 10px; }
			.spin.down { bottom: 10px; }
			
		.spin span {
		  font-size: 16px;             /* размер символа стрелки */
		  line-height: 1;
		  filter: invert(1);
		}
		.spin:active { transform: translateY(1px); }

		
        .right-section_admin h3 {
            margin-top: 0;
            font-size: 1.2em;
            text-align: center;
        }
        .field-label {
            margin-bottom: 10px;
            font-size: 14px;
            color: #FFFFFF;
        }
        .serial-input {
            display: flex;
            align-items: center;
            border: 1px solid #555;
            border-radius: 4px;
            background-color: #444;
            margin-bottom: 20px;
            padding: 10px;
        }
        .serial-input input {
            flex: 1;
            height: 30px;
            text-align: center;
            font-size: 1em;
            border: none;
            background: none;
            color: #FFFFFF;
            padding-right: 10px;
        }
        .serial-input span {
            flex-shrink: 0;
            padding-left: 10px;
            font-size: 0.9em;
            color: #FFFFFF;
        }
        .tooltip {
            position: relative;
            display: inline-block;
            cursor: pointer;
        }
        .tooltip .tooltiptext {
            visibility: hidden;
            width: 200px;
            background-color: #555;
            color: #fff;
            text-align: center;
            border-radius: 6px;
            padding: 5px;
            position: absolute;
            z-index: 1;
            bottom: 125%;
            left: 50%;
            margin-left: -100px;
            opacity: 0;
            transition: opacity 0.3s;
        }
        .tooltip:hover .tooltiptext {
            visibility: visible;
            opacity: 1;
        }
        .submit-button {
            display: block;
            margin: 30px auto;
            padding: 10px 20px;
            background-color: #555555;
            border: none;
            color: #FFFFFF;
            font-size: 16px;
            cursor: pointer;
            border-radius: 5px;
            transition: background-color 0.3s;
        }
        .submit-button:hover {
            background-color: #666666;
        }
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.7);
        }
        .modal-content {
            background-color: #2c2c2c;
            margin: 20% auto;
            padding: 20px;
            border: 1px solid #555;
            width: 30%;
            text-align: center;
            border-radius: 10px;
        }
        .modal-content p {
            font-size: 1em;
            color: #FFF;
        }
        .ok-button, .cancel-button {
            padding: 10px 20px;
            margin: 10px;
            border: none;
            cursor: pointer;
            font-size: 16px;
            border-radius: 5px;
            transition: background-color 0.3s;
        }
        .ok-button {
            background-color: #4caf50;
            color: white;
        }
        .cancel-button {
            background-color: #f44336;
            color: white;
        }
        .ok-button:hover {
            background-color: #45a049;
        }
        .cancel-button:hover {
            background-color: #e53935;
        }



    </style>
</head>
<body>
    <div class="header">
        <h2>Микроконтроллерная система защиты рудничная МСЗР-380. Настройка фаз</h2>
    </div>

    <div class="container_admin">
        <div class="right-section_admin">
            <h3>Фаза A</h3>
            <form>
                <label class="field-label" for="c_phase_a">Паразитная емкость кабеля:</label>
                <div class="serial-input">
                    <input id="c_phase_a" type="text" value="<!--#CPHASEA-->">
                    <span>&mu;F</span>
                </div>
                <label class="field-label" for="r_leak_a">Сопротивление изоляции:</label>
                <div class="serial-input">
                    <input id="r_leak_a" type="text" value="<!--#RLEAKA-->">
                    <span>MΩ</span>
                </div>
            </form>
        </div>
        <div class="right-section_admin">
            <h3>Фаза B</h3>
            <form>
                <label class="field-label" for="c_phase_b">Паразитная емкость кабеля:</label>
                <div class="serial-input">
                    <input id="c_phase_b" type="text" value="<!--#CPHASEB-->">
                    <span>&mu;F</span>
                </div>
                <label class="field-label" for="r_leak_b">Сопротивление изоляции:</label>
                <div class="serial-input">
                    <input id="r_leak_b" type="text" value ="<!--#RLEAKB-->">
                    <span>MΩ</span>
                </div>
            </form>
        </div>
        <div class="right-section_admin">
            <h3>Фаза C</h3>
            <form>
                <label class="field-label" for="c_phase_c">Паразитная емкость кабеля:</label>
                <div class="serial-input">
                    <input id="c_phase_c" type="text"  value ="<!--#CPHASEC-->">
                    <span>&mu;F</span>
                </div>
                <label class="field-label" for="r_leak_c">Сопротивление изоляции:</label>
                <div class="serial-input">
                    <input id="r_leak_c" type="text"  value ="<!--#RLEAKC-->">
                    <span>MΩ</span>
                </div>
            </form>
        </div>
    </div>

    <div class="full-width-section">
        <form>
            <div class="tooltip">
                ⓘ
                <span class="tooltiptext">Защита сработает, если ток утечки любой из фаз (A/B/C) превысит установленное пороговое значение.</span>
            </div>
            <label class="field-label" for="target_value">Пороговое значение тока утечки:</label>
            <div class="serial-input">
                <input id="target_value" type="text" value="<!--#TVALUE-->">
                <span>mA</span>
            </div>
        </form>
		
		
		<form>
            <div class="tooltip">
                ⓘ
                <span class="tooltiptext">При достижении током данного порога, система сгенерирует предупреждение.</span>
            </div>
            <label class="field-label" for="target_value">Порог предупреждения:</label>
            <div class="serial-input">
                <input id="warning_value" type="text" value="<!--#WVALUE-->">
                <span>mA</span>
            </div>
        </form>

		<form>
			<div class="tooltip">
                ⓘ
                <span class="tooltiptext">Время, через которое при срабатывании реле, оно будет отключено.</span>
            </div>
			<label class="field-label" for="reley_time">Время отключения реле:</label>
			<div class="serial-input">
			  <input id="reley_time" type="number" min="0" max="3" step="0.01" value="" readonly>
			  <span class="unit">с</span>         
			  <div class="spin up"   data-dir="up"><span>▲</span></div>
			  <div class="spin down" data-dir="down"><span>▼</span></div>
			</div>
		</form>
			</div>


    <button class="submit-button" onclick="saveChangesAdmin()">Сохранить изменения</button>

    <div id="customModal" class="modal">
        <div class="modal-content">
            <p>Вы уверены, что хотите применить изменения?</p>
            <button class="ok-button" onclick="confirmChangesAdmin()">OK</button>
            <button class="cancel-button" onclick="closeCustomModal()">Отмена</button>
        </div>
    </div>


      <div class="serial-input" style="display:none;" >
            <input id="reley_time_tag" style="display:none;" type="text" value="<!--#RELTIM-->">
      </div>



    <script>
        function saveChangesAdmin() {
            const modal = document.getElementById('customModal');
            modal.style.display = 'flex';
        }

        function confirmChangesAdmin() {
            const modal = document.getElementById('customModal');
            modal.style.display = 'none';
            saveDataAdmin(); 
        }

        function closeCustomModal() {
            const modal = document.getElementById('customModal');
            modal.style.display = 'none';
        }

        function validatePhaseData(values) {
            let targetValue = values.target_value;
            console.log("Original targetValue:", targetValue);

            const hasLetters = /[a-zA-Zа-яА-Я]/.test(targetValue);
            if (hasLetters) {
                console.log("Validation failed: содержит буквенные символы.");
                return false;
            }

            const dotCount = (targetValue.match(/\./g) || []).length;
            const commaCount = (targetValue.match(/,/g) || []).length;

            if (dotCount + commaCount > 1) {
                console.log("Validation failed: более одной точки или запятой.");
                return false;
            }

            if (commaCount === 1) {
                targetValue = targetValue.replace(',', '.');
                values.target_value = targetValue;
                console.log("Запятая заменена на точку:", targetValue);
            }

            console.log("Validation passed.");
            return true;
        }
		
		function inRange05to10(v) {
			const n = parseFloat((v + '').replace(',', '.'));
			return !isNaN(n) && n >= 0.2 && n <= 1.0;
		}

        function saveDataAdmin() {
            const cPhaseA = document.getElementById('c_phase_a').value;
            const rLeakA = document.getElementById('r_leak_a').value;
            const cPhaseB = document.getElementById('c_phase_b').value;
            const rLeakB = document.getElementById('r_leak_b').value;
            const cPhaseC = document.getElementById('c_phase_c').value;
            const rLeakC = document.getElementById('r_leak_c').value;
            const targetValue = document.getElementById('target_value').value;
            const warningValue = document.getElementById('warning_value').value;
            const releyTime = document.getElementById('reley_time').value; // время отключения реле

            const updatedData = {};

            if (cPhaseA) updatedData.c_phase_a = cPhaseA;
            if (rLeakA)  updatedData.r_leak_a  = rLeakA;
            if (cPhaseB) updatedData.c_phase_b = cPhaseB;
            if (rLeakB)  updatedData.r_leak_b  = rLeakB;
            if (cPhaseC) updatedData.c_phase_c = cPhaseC;
            if (rLeakC)  updatedData.r_leak_c  = rLeakC;
            if (targetValue) updatedData.target_value = targetValue;
            if (warningValue) updatedData.warning_value = warningValue;

            if (releyTime) {
                const timeSec = releyTime.replace(',', '.'); // заменяем запятую на точку
                const timeMs = Math.round(parseFloat(timeSec) * 1000); // перевод в миллисекунды
                updatedData.reley_time = timeMs.toString(); // отправка без точки
            }
			
            if (Object.keys(updatedData).length === 0) {
                alert('Нет измененных данных для сохранения.');
                return;
            }

			if (![cPhaseA, cPhaseB, cPhaseC].every(inRange05to10)) {
				alert('Паразитная ёмкость кабеля должна быть от 0.2 до 1.0 µF');
				return;
			}



            if (!validatePhaseData(updatedData)) {
                alert('Данные не валидны');
                return;
            }

            const queryString = new URLSearchParams(updatedData).toString();

            fetch(`/save?${queryString}`, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json'
                }
            });

            setTimeout(function() {
                window.location.href = "/index.shtml";
            }, 5000);
        }

        function extractValue(value) {
            return value.replace(/<!--.*?-->/, '').trim();
        }

        function roundValue(value) {
            let val = extractValue(value);
            const dotIndex = val.indexOf('.');
            if (dotIndex === -1) {
                return val;
            }

            let intPart = val.slice(0, dotIndex);
            let fracPart = val.slice(dotIndex + 1);

            const zeroIndex = fracPart.search(/0{4}/);
            if (zeroIndex !== -1) {
                fracPart = fracPart.slice(0, zeroIndex);
            }

            return fracPart.length > 0 ? intPart + '.' + fracPart : intPart;
        }


        window.addEventListener('DOMContentLoaded', function () {
            // Автоматическое округление значений
            var inputs = document.querySelectorAll('input');
            inputs.forEach(function (input) {
                input.value = roundValue(input.value);
            });

            const relayInput = document.getElementById('reley_time');      // сам спинбокс
			const relayTag   = document.getElementById('reley_time_tag');  // скрытый input

			if (relayInput && relayTag) {
				let raw = extractValue(relayTag.value); // вырезаем <!-- ... -->
				if (parseFloat(raw) > 3) {             // если это миллисекунды
					raw = (parseFloat(raw) / 1000).toFixed(2); // → секунды с 2 знаками
				}
				relayInput.value = raw;                // инициализируем спинбокс
			}
        });
		
		
		(function () {
		  const input = document.getElementById('reley_time');

		  // блокируем колесо и клавиатуру (оставим Tab и стрелки для табинга)
		  input.addEventListener('wheel', e => e.preventDefault(), { passive: false });
		  input.addEventListener('keydown', e => {
			if (e.key !== 'Tab') e.preventDefault();
		  });

		  const min  = Number(input.min || 0);
		  const max  = Number(input.max || 3);
		  const step = Number(input.step || 0.01);

		  // масштаб в целые тики (для 0.01 это 100)
		  const SCALE = Math.round(1 / step);

		  const clamp = v => Math.min(max, Math.max(min, v));
		  const toTicks = v => Math.round(v * SCALE);
		  const fromTicks = t => t / SCALE;

		  // читаем текущее значение как число (точка!)
		  const read = () => {
			const n = parseFloat(String(input.value).replace(',', '.'));
			return isNaN(n) ? 0 : n;
		  };

		  // пишем аккуратное значение: фикс до 2 знаков, БЕЗ запятой
		  const write = v => {
			const n = Number(v.toFixed(2));       // убрали хвосты 0.060000000000000005
			input.value = String(n);              // value остаётся валидным для type=number
			// если хочешь всегда 2 знака — используй: input.value = n.toFixed(2);
			input.dispatchEvent(new Event('input',  { bubbles: true }));
			input.dispatchEvent(new Event('change', { bubbles: true }));
		  };

		  // собственные кнопки ▲ ▼
		  document.querySelectorAll('.serial-input .spin').forEach(btn => {
			btn.addEventListener('click', () => {
			  const cur = clamp(read());
			  let ticks = toTicks(cur);
			  ticks += (btn.dataset.dir === 'up' ? 1 : -1); // один шаг
			  const next = clamp(fromTicks(ticks));
			  write(next);
			});
		  });
		})();
		
		

    </script>
</body>
</html>

